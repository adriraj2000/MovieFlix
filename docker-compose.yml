version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: movieflix-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD:-password}
      MYSQL_DATABASE: movieflix
      MYSQL_USER: movieflix
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
    networks:
      - movieflix-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: movieflix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - movieflix-network

  # MovieFlix Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: movieflix-app
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      MYSQL_URL: jdbc:mysql://mysql:3306/movieflix
      MYSQL_USERNAME: ${MYSQL_USERNAME:-movieflix}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OMDB_API_KEY: ${OMDB_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movieflix-network
    restart: unless-stopped

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local

networks:
  movieflix-network:
    driver: bridge

